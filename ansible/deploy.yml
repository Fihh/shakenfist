--- # Install shakenfist on a series of Ubuntu machines
- hosts: localhost
  gather_facts: yes
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Ensure unit tests pass
      shell: tox -epy37

    - name: Clear out old wheels
      file:
        path: ../dist
        state: absent

    - name: Ensure we have a local dist directory
      file:
        path: ../dist
        state: directory

    - name: Build a wheel for shakenfist
      shell:
        cmd: python3 setup.py sdist bdist_wheel
        chdir: ..

    - name: Find the most recent wheel for shakenfist
      shell: ls -rt ../dist/*.whl | tail -1 | sed 's/\.\.\/dist\///'
      register: wheel_complex

    - name: Extract wheel filename
      set_fact:
        wheel_path: "{{wheel_complex.stdout}}"

    - name: Log wheel details
      debug:
        msg: "Wheel is: {{hostvars['localhost']['wheel_path']}}"

    - name: Generate a random auth secret
      set_fact:
        auth_secret: "{{ lookup('password', '/dev/null length=30 chars=ascii_letters') }}"

    - include: terraform/{{cloud}}/terraform.yml

    - name: Wait for instances to boot
      pause:
        minutes: "{{bootdelay}}"

- hosts: hypervisors
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - include: terraform/{{cloud}}/postboot.yml

- hosts: db
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh

  vars_files:
    - vars

  tasks:
    - name: Write syslog file
      template:
        src: files/rsyslog-server-01-sf.conf
        dest: /etc/rsyslog.d/01-sf.conf
        owner: root
        group: sudo
        mode: u=r,g=r,o=

    - name: Restart syslog
      service:
        name: rsyslog
        enabled: yes
        state: restarted

- hosts: allsf
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: yes
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Syslog server is DB server
      set_fact:
        syslog: "{{hostvars['localhost']['database_node_ip']}}"

    - name: Send syslog to the DB server, unless I am the DB server
      template:
        src: files/rsyslog-client-01-sf.conf
        dest: /etc/rsyslog.d/01-sf.conf
        owner: root
        group: sudo
        mode: u=r,g=r,o=
      when: hostvars['localhost']['database_node_ip'] != node_ip

    - name: Restart syslog
      service:
        name: rsyslog
        enabled: yes
        state: restarted
      when: hostvars['localhost']['database_node_ip'] != node_ip

    - include: includes/debian.yml

    - name: Check that we can run KVM
      shell: kvm-ok

    - name: Make /srv/shakenfist/
      file:
        path: /srv/shakenfist
        state: directory
        mode: "0755"

# Install etcd on all nodes, with members of etcd-master being voting nodes
- hosts: etcd
  roles:
    - role: andrewrothstein.etcd-cluster
      etcd_secure: False
      etcd_data_dir: /srv/shakenfist/etcd
      etcd_cluster_name: shakenfist
      etcd_enable_v2: False
      etcd_master_group_name: etcd_master

- hosts: allsf
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: yes
  connection: ssh
  vars_files:
    - vars

  tasks:
    - include: includes/python3.yml

    - name: Ensure the source directory is absent
      file:
        path: /srv/shakenfist/src/
        state: absent

    - name: Copy shakenfist
      synchronize:
        src: ../dist/{{hostvars['localhost']['wheel_path']}}
        dest: /srv/shakenfist/

    - name: Uninstall shakenfist, if present
      command: pip3 uninstall -y shakenfist
      ignore_errors: True

    - name: Install shakenfist
      command: pip3 install {{hostvars['localhost']['wheel_path']}}
      args:
        chdir: /srv/shakenfist/

    - name: Create config directory
      file:
        path: /etc/sf
        state: directory
        mode: "0755"

    - name: Determine default interface
      shell: ip route list default | head -1 | cut -f 5 -d " "
      register: node_egress_nic_complex
      when: node_egress_nic is not defined

    - name: Extract node default interface
      set_fact:
        node_egress_nic: "{{node_egress_nic_complex.stdout}}"
      when: node_egress_nic is not defined

    - name: Write sfrc file
      template:
        src: files/sfrc
        dest: /etc/sf/sfrc
        owner: root
        group: sudo
        mode: u=r,g=r,o=

    - name: Write a global auth file
      template:
        src: files/shakenfist.json
        dest: /etc/sf/shakenfist.json
        owner: root
        group: sudo
        mode: u=r,g=r,o=

- hosts: db
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh

  vars_files:
    - vars

  tasks:
    - include: includes/docker.yml

    - name: Create a prometheus user
      user:
        name: sfprometheus
        comment: shakenfist prometheus
        group: daemon
      register: sfprometheus_user_complex

    - name: Test if we have a prometheus
      shell: docker inspect sfprom
      ignore_errors: True
      register: has_sfprom

    - name: Stop prometheus if running
      shell: docker stop sfprom
      when: has_sfprom.rc == 0

    - name: Make /srv/shakenfist/prometheus
      file:
        path: /srv/shakenfist/prometheus
        state: directory
        owner: sfprometheus
        mode: u=rwx,g=,o=

    - name: Fix prometheus permissions
      file:
        path: /srv/shakenfist/prometheus
        recurse: true
        owner: sfprometheus
        mode: u=rwx,g=,o=

    - name: Write prometheus configuration file
      copy:
        content: |
          global:
            external_labels:
              monitor: 'shakenfist'

          scrape_configs:
            - job_name: 'node'
              static_configs:
                - targets: [
                      {% for svr in groups.allsf %}
                        '{{hostvars[svr]['node_ip']}}:9100',
                      {% endfor %}
                    ]
            - job_name: 'shakenfist'
              static_configs:
                - targets: [
                      {% for svr in groups.hypervisors %}
                        '{{hostvars[svr]['node_ip']}}:13001',
                      {% endfor %}
                    ]
        dest: /srv/shakenfist/prometheus/prometheus.yml
        owner: sfprometheus
        mode: u=rwx,g=,o=

    - name: Create prometheus docker container
      docker_container:
        name: sfprom
        image: prom/prometheus
        restart_policy: always
        volumes:
          - /srv/shakenfist/prometheus:/prometheus
          - /srv/shakenfist/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
        ports:
          - 0.0.0.0:9090:9090
        user: "{{sfprometheus_user_complex.uid}}"

    - name: Create a grafana user
      user:
        name: sfgrafana
        comment: shakenfist grafana
        group: daemon
      register: sfgrafana_user_complex

    - name: Test if we have a grafana
      shell: docker inspect sfgrafana
      ignore_errors: True
      register: has_sfgrafana

    - name: Stop grafana if running
      shell: docker stop sfgrafana
      when: has_sfgrafana.rc == 0

    - name: Make /srv/shakenfist/grafana
      file:
        path: /srv/shakenfist/grafana
        state: directory
        owner: sfgrafana
        mode: u=rwx,g=,o=

    - name: Make /srv/shakenfist/grafana/data
      file:
        path: /srv/shakenfist/grafana/data
        state: directory
        owner: sfgrafana
        mode: u=rwx,g=,o=

    - name: Make /srv/shakenfist/grafana/logs
      file:
        path: /srv/shakenfist/grafana/logs
        state: directory
        owner: sfgrafana
        mode: u=rwx,g=,o=

    - name: Make /srv/shakenfist/grafana/dashboards
      file:
        path: /srv/shakenfist/grafana/dashboards
        state: directory
        owner: sfgrafana
        mode: u=rwx,g=,o=

    - name: Make /srv/shakenfist/grafana/config/provisioning/datasources
      file:
        path: /srv/shakenfist/grafana/config/provisioning/datasources
        state: directory
        owner: sfgrafana
        mode: u=rwx,g=,o=

    - name: Write grafana dashboard
      copy:
        src: files/grafana.json
        dest: /srv/shakenfist/grafana/dashboards/shakenfist.json
        owner: sfgrafana
        mode: u=rwx,g=,o=

    - name: Copy grafana config
      synchronize:
        src: files/grafana/
        dest: /srv/shakenfist/grafana/config

    - name: Fix grafana permissions
      file:
        path: /srv/shakenfist/grafana
        recurse: true
        owner: sfgrafana
        mode: u=rwx,g=,o=

    - name: Write prometheus grafana configuration file
      copy:
        content: |
          apiVersion: 1

          datasources:
          - name: Prometheus
            type: prometheus
            orgId: 1
            url: http://{{node_ip}}:9090
            isDefault: true
            version: 1
            editable: false
            access: proxy
            jsonData:
              tlsSkipVerify: true
        dest: /srv/shakenfist/grafana/config/provisioning/datasources/prometheus.yml
        owner: sfgrafana
        mode: u=rwx,g=,o=

    - name: Create grafana docker container
      docker_container:
        name: sfgrafana
        image: grafana/grafana
        restart_policy: always
        volumes:
          - /srv/shakenfist/grafana/data:/var/lib/grafana
          - /srv/shakenfist/grafana/logs:/var/log/grafana
          - /srv/shakenfist/grafana/dashboards:/var/lib/grafana/dashboards
          - /srv/shakenfist/grafana/config:/etc/grafana
        env:
          GF_SECURITY_ADMIN_PASSWORD: "{{db_user_password}}"
        ports:
          - 3000:3000
        user: "{{sfgrafana_user_complex.uid}}"

    - name: Create an admin namespace called "system" with a password configured
      shell: sf-passwd deploy "{{api_admin_password}}"

- hosts: hypervisors
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Create storage directory
      file:
        path: /srv/shakenfist
        state: directory
        mode: "0755"

    - name: Copy libvirt template
      copy:
        src: files/libvirt.tmpl
        dest: /srv/shakenfist/libvirt.tmpl
        owner: root
        group: root
        mode: "0644"

    - name: Turn off default libvirt networking
      shell: |
        virsh net-destroy default
      ignore_errors: True

    - name: Copy dhcp config template
      copy:
        src: files/dhcp.tmpl
        dest: /srv/shakenfist/dhcp.tmpl
        owner: root
        group: root
        mode: "0644"

    - name: Copy dhcp hosts template
      copy:
        src: files/dhcphosts.tmpl
        dest: /srv/shakenfist/dhcphosts.tmpl
        owner: root
        group: root
        mode: "0644"

    - name: Determine node IP
      shell: /usr/bin/dig @resolver1.opendns.com ANY myip.opendns.com +short
      register: node_ip_complex
      when: node_ip is not defined

    - name: Extract node IP
      set_fact:
        node_ip: "{{node_ip_complex.stdout}}"
      when: node_ip is not defined

    - name: Write systemd unit
      template:
        src: files/sf.service
        dest: /lib/systemd/system
        owner: root
        group: root
        mode: u=r,g=r,o=r

    - name: Start the SF daemon
      service:
        name: sf
        enabled: yes
        state: restarted
