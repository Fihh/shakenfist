#########################################
# Import inventory from terraform
#########################################

- hosts: localhost
  gather_facts: yes
  connection: ssh
  vars_files:
    - ../vars

  tasks:
    - include: "{{ansible_root}}/terraform/{{cloud}}/terraform.yml"

- hosts: hypervisors
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - ../vars

  tasks:
    - include: _setup.yml
    - include: _util_instance_start.yml
        name="cirros"
        distro=cirros
        network="{{net_one_uuid}}"
        sshkey=""
        userdata=""

    - name: Validate
      copy:
        content: |
          #!/bin/bash -e

          [ `sf-client --simple instance list | grep sf-1 | wc -l` -eq 1 ]
          [ `sf-client --simple instance list | grep sf-2 | wc -l` -eq 1 ]
        dest: /tmp/shell_script
        owner: root
        group: root
        mode: u=rx,g=rx,o=rx

    - name: Execute
      shell: /tmp/shell_script

#########################################
# Scenario: we can start an Ubuntu instance too
#########################################

- hosts: sf-2
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - ../vars

  tasks:
    - include: _util_instance_start.yml
        name="ubuntu"
        distro=ubuntu:18.04
        network="{{net_one_uuid}}"
        sshkey=""
        userdata=""

- hosts: sf-1
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - ../vars

  tasks:
    # NOTE(mikal): Ubuntu 18.04 has a bug where DHCP doesn't always work in the
    # cloud image. This is ok though, because we should be using the config drive
    # style interface information anyway.

    - name: Instance is pingable from inside the network namespace
      shell: |
        [ `ip netns exec {{net_one_uuid}} ping -c 1 {{hostvars['sf-2']['ubuntu_ip']}} | grep -c " 0% packet loss"` -eq 1 ]

#########################################
# Scenario: deleting instances works
#########################################

- hosts: sf-2
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - ../vars

  tasks:
    - name: Deleting an instance hosted locally should work
      sf_instance:
        uuid: "{{ubuntu_uuid}}"
        state: absent

    - include: _util_network_cirros_validate.yml
        console_port="{{cirros_console_port}}"
        netblock_octets="192.168.242"

    - name: We should have one VM on sf-2
      shell: |
        [ `virsh list | grep running | wc -l` -eq 1 ]

#########################################
# Scenario: reboots, pauses, and power offs
#########################################

- hosts: sf-2
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - ../vars

  tasks:
    - include: _util_instance_reboot.yml
        uuid={{cirros_uuid}}
        type=soft

    - include: _util_network_cirros_validate.yml
        console_port="{{cirros_console_port}}"
        netblock_octets="192.168.242"

    - include: _util_instance_reboot.yml
        uuid={{cirros_uuid}}
        type=hard

    - include: _util_network_cirros_validate.yml
        console_port="{{cirros_console_port}}"
        netblock_octets="192.168.242"

    - include: _util_instance_halt.yml
        uuid={{cirros_uuid}}
        action_one=poweroff
        action_two=poweron

    - include: _util_network_cirros_validate.yml
        console_port="{{cirros_console_port}}"
        netblock_octets="192.168.242"

    - include: _util_instance_halt.yml
        uuid={{cirros_uuid}}
        ip={{cirros_uuid}}
        action_one=pause
        action_two=unpause

    - include: _util_network_cirros_validate.yml
        console_port="{{cirros_console_port}}"
        netblock_octets="192.168.242"

#########################################
# Scenario: delete a remote instance
#########################################

- hosts: sf-1
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - ../vars

  tasks:
    - name: Deleting an instance hosted remotely should work
      sf_instance:
        uuid: "{{hostvars['sf-2']['cirros_uuid']}}"
        state: absent

    - name: Ensure delete worked
      shell: |
        [ `sf-client --simple instance list | grep sf-2 | wc -l` -eq 0 ]

- hosts: sf-2
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - ../vars

  tasks:
    - name: We shouldn't have any VMs or mesh networks running on sf-2
      copy:
        content: |
          #!/bin/bash -e

          [ `virsh list | grep running | wc -l` -eq 0 ]
          [ `ifconfig | grep -c vxlan` -eq 0 ]
        dest: /tmp/shell_script
        owner: root
        group: root
        mode: u=rx,g=rx,o=rx

    - name: Execute
      shell: /tmp/shell_script
