#########################################
# Import inventory from terraform
#########################################

- hosts: localhost
  gather_facts: yes
  connection: ssh
  vars_files:
    - vars

  tasks:
    - include: terraform/{{cloud}}/terraform.yml

#########################################
# Scenario: we can start cirros VMs
#########################################

- hosts: hypervisors
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - include: tests/_setup.yml
    - include: tests/_util_instance_start.yml
        name="cirros"
        distro=cirros
        network="{{net_one_uuid}}"
        sshkey=""
        userdata=""

    - name: Validate
      copy:
        content: |
          #!/bin/bash -e

          [ `sf-client --simple instance list | wc -l` -eq 3 ]
          [ `sf-client --simple instance list | grep sf-1 | wc -l` -eq 1 ]
          [ `sf-client --simple instance list | grep sf-2 | wc -l` -eq 1 ]
        dest: /tmp/shell_script
        owner: root
        group: root
        mode: u=rx,g=rx,o=rx

    - name: Execute
      shell: /tmp/shell_script

#########################################
# Scenario: the network node DHCP is correct
#########################################

- hosts: sf-1
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Ensure that the instances appear in the dhcp config on the network node
      copy:
        content: |
          #!/bin/bash -e

          [ `grep -c "{{hostvars['sf-1']['cirros_ip']}}" /srv/shakenfist/dhcp/{{net_one_uuid}}/hosts` -eq 1 ]
          [ `grep -c "{{hostvars['sf-2']['cirros_ip']}}" /srv/shakenfist/dhcp/{{net_one_uuid}}/hosts` -eq 1 ]
        dest: /tmp/shell_script
        owner: root
        group: root
        mode: u=rx,g=rx,o=rx

    - name: Execute
      shell: /tmp/shell_script

- hosts: sf-2
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Ensure that dhcp is not configured on a non-network-node
      copy:
        content: |
          #!/bin/bash -e

          [ ! -e /srv/shakenfist/dhcp/{{net_one_uuid}}/config ]
          [ `ifconfig | grep -c 192.168.242.1` -eq 0 ]
        dest: /tmp/shell_script
        owner: root
        group: root
        mode: u=rx,g=rx,o=rx

    - name: Execute
      shell: /tmp/shell_script

#########################################
# Scenario: verify networking on our cirros instances
#########################################

- hosts: hypervisors
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - include: tests/_util_network_cirros_validate.yml
        console_port="{{cirros_console_port}}"
        netblock_octets="192.168.242"

- hosts: sf-1
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: The instance on sf-1 should be able to ping the instance on sf-2
      shell: |
        [ `/opt/telnet_client.py {{cirros_console_port}} ping {{hostvars['sf-2']['cirros_ip']}} | grep -c " 0% packet loss"` -eq 1 ]

#########################################
# Scenario: snapshots work
#########################################

- hosts: sf-1
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Snapshot sf-1 cirros
      shell: |
        sf-client instance snapshot {{hostvars['sf-1']['cirros_uuid']}}

    - name: Validate
      shell: |
        [ `sf-client --simple instance show {{hostvars['sf-1']['cirros_uuid']}} True | grep -v "snapshot,uuid" | grep -c "snapshot,"` -eq 1 ]

    - name: Snapshot sf-2
      shell: |
        sf-client instance snapshot {{hostvars['sf-2']['cirros_uuid']}} True

    - name: Validate
      shell: |
        [ `sf-client --simple instance show {{hostvars['sf-2']['cirros_uuid']}} True | grep -v "snapshot,uuid" | grep -c "snapshot,"` -eq 2 ]

#########################################
# Scenario: we do not snapshot CD-ROMs
#########################################

- hosts: sf-1
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Start a cirros instance on sf-1
      sf_instance:
        name: "cirros_cdrom"
        cpu: 1
        ram: 1
        disks:
          - "8@cirros"
          - "8@http://archive.ubuntu.com/ubuntu/dists/focal/main/installer-amd64/current/legacy-images/netboot/mini.iso"
        networks:
          - "{{net_one_uuid}}"
        ssh_key: ""
        user_data: ""
      register: instance_create_out

    - name: Log instance details
      debug:
        msg: "{{instance_create_out}}"

    - name: Extract instance uuid
      set_fact:
        "cirros_cdrom_uuid": "{{instance_create_out.meta.uuid}}"

    - name: Snapshot instance
      shell: |
        sf-client instance snapshot {{cirros_cdrom_uuid}} True

    - name: Validate
      shell: |
        [ `sf-client --simple instance show {{cirros_cdrom_uuid}} True | grep -v "snapshot,uuid" | grep -c "snapshot,"` -eq 1 ]

    - name: Delete instance
      shell: |
        sf-client instance delete {{cirros_cdrom_uuid}}

#########################################
# Scenario: we can create an instance with no networking configured
#########################################

- hosts: sf-1
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Start a cirros instance on sf-1
      sf_instance:
        name: "cirros_no_network"
        cpu: 1
        ram: 1
        disks:
          - "8@cirros"
        networks:
        ssh_key: ""
        user_data: ""
      register: instance_create_out

    - name: Log instance details
      debug:
        msg: "{{instance_create_out}}"

    - name: Extract instance uuid
      set_fact:
        "cirros_no_network_uuid": "{{instance_create_out.meta.uuid}}"

    - name: Delete instance
      shell: |
        sf-client instance delete {{cirros_no_network_uuid}}

#########################################
# Scenario: we can start an Ubuntu instance too
#########################################

- hosts: sf-2
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - include: tests/_util_instance_start.yml
        name="ubuntu"
        distro=ubuntu:18.04
        network="{{net_one_uuid}}"
        sshkey=""
        userdata=""

- hosts: sf-1
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    # NOTE(mikal): Ubuntu 18.04 has a bug where DHCP doesn't always work in the
    # cloud image. This is ok though, because we should be using the config drive
    # style interface information anyway.

    - name: Instance is pingable from inside the network namespace
      shell: |
        [ `ip netns exec {{net_one_uuid}} ping -c 1 {{hostvars['sf-2']['ubuntu_ip']}} | grep -c " 0% packet loss"` -eq 1 ]

#########################################
# Scenario: deleting instances works
#########################################

- hosts: sf-2
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Deleting an instance hosted locally should work
      sf_instance:
        uuid: "{{ubuntu_uuid}}"
        state: absent

    - include: tests/_util_network_cirros_validate.yml
        console_port="{{cirros_console_port}}"
        netblock_octets="192.168.242"

    - name: We should have one VM on sf-2
      shell: |
        [ `virsh list | grep running | wc -l` -eq 1 ]

#########################################
# Scenario: reboots, pauses, and power offs
#########################################

- hosts: sf-2
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - include: tests/_util_instance_reboot.yml
        uuid={{cirros_uuid}}
        type=soft

    - include: tests/_util_network_cirros_validate.yml
        console_port="{{cirros_console_port}}"
        netblock_octets="192.168.242"

    - include: tests/_util_instance_reboot.yml
        uuid={{cirros_uuid}}
        type=hard

    - include: tests/_util_network_cirros_validate.yml
        console_port="{{cirros_console_port}}"
        netblock_octets="192.168.242"

    - include: tests/_util_instance_halt.yml
        uuid={{cirros_uuid}}
        action_one=poweroff
        action_two=poweron

    - include: tests/_util_network_cirros_validate.yml
        console_port="{{cirros_console_port}}"
        netblock_octets="192.168.242"

    - include: tests/_util_instance_halt.yml
        uuid={{cirros_uuid}}
        ip={{cirros_uuid}}
        action_one=pause
        action_two=unpause

    - include: tests/_util_network_cirros_validate.yml
        console_port="{{cirros_console_port}}"
        netblock_octets="192.168.242"

#########################################
# Scenario: delete a remote instance
#########################################

- hosts: sf-1
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Deleting an instance hosted remotely should work
      sf_instance:
        uuid: "{{hostvars['sf-2']['cirros_uuid']}}"
        state: absent

    - name: Ensure delete worked
      shell: |
        [ `sf-client --simple instance list | grep sf-2 | wc -l` -eq 0 ]

- hosts: sf-2
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: We shouldn't have any VMs or mesh networks running on sf-2
      copy:
        content: |
          #!/bin/bash -e

          [ `virsh list | grep running | wc -l` -eq 0 ]
          [ `ifconfig | grep -c vxlan` -eq 0 ]
        dest: /tmp/shell_script
        owner: root
        group: root
        mode: u=rx,g=rx,o=rx

    - name: Execute
      shell: /tmp/shell_script

#########################################
# Scenario: user data and ssh keys
#########################################

- hosts: sf-2
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - include: tests/_util_instance_start.yml
        name="cirros_with_extras"
        distro=cirros
        network="{{net_one_uuid}}"
        sshkey="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCuGJ47be0/3EH/q1b/2AYdhvTG/5L84QnKm3MhTO+cQGYfxw2AhPk6AOdHYPIp+t2wV/noc1eKCHN8n//T424usEIQ/ODg9o2BeAhUU8S4qd6XSW5ihOknBZRnoQrYmAM6gUUvF4hLJ62Tzf/h2Hi9Wl774DRDs/Il5pBJnt+AdAgLcnVgJJG8KtX3JnynwnBOTlbKnyIWmEnHZL+RH2+lIftsVXelLwq/bpzBWsg0JjjGvtuuKMMge0y3ZfsBA8/vLytaEV/vQk/osilJeAbYa7Ul1K65S5eC2G2Yx4rNKdx0nn4lK2o/2keN52pDhrJbmK4907B50mWqtCFjsNULnfT5paInHRPgasKl007E0ZNNxhfXWieiVCUu/5zFiMPcWyB9YN60gp4lZSKB19GaURxtbKWlajfEakn3mTm9JQH5eU48XIaCh+LcptKYd6lDBWeoicQzECQLMfnKuGpfoZsKbOTTeCzS0/q6guKLNgfXijpRf5uaZaTqQa18t8s= mikal@marvin"
        userdata="IyEvYmluL3NoCgplY2hvICJIZWxsbyBXb3JsZC4gIFRoZSB0aW1lIGlzIG5vdyAkKGRhdGUgLVIpISIgPiAvaG9tZS9jaXJyb3Mvb3V0cHV0LnR4dApjaG93biBjaXJyb3MuY2lycm9zIC9ob21lL2NpcnJvcy9vdXRwdXQudHh0"

    # The test value is two here because we also get a copy of the shell script that the
    # helper runs
    - name: Ensure user data ran and ssh keys were setup, then cleanup
      copy:
        content: |
          #!/bin/bash -e

          [ `/opt/telnet_client.py {{cirros_with_extras_console_port}} exists /home/cirros/output.txt | grep -c "File exists"` -eq 2 ]
          [ `/opt/telnet_client.py {{cirros_with_extras_console_port}} exists /home/cirros/.ssh/authorized_keys | grep -c "File exists"` -eq 2 ]
        dest: /tmp/shell_script
        owner: root
        group: root
        mode: u=rx,g=rx,o=rx

    - name: Execute
      shell: /tmp/shell_script

    - name: Delete instance
      sf_instance:
        uuid: "{{cirros_with_extras_uuid}}"
        state: absent

#########################################
# Scenario: a second network shouldn't be able to see the first network
#########################################

- hosts: sf-1
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - include: tests/_util_network_create.yml
        netblock="192.168.240.0/24"
        name="net_two"

    - include: tests/_util_instance_start.yml
        name="cirros_net_two"
        distro=cirros
        network="{{net_two_uuid}}"
        sshkey=""
        userdata=""

    - include: tests/_util_network_cirros_validate.yml
        console_port="{{cirros_net_two_console_port}}"
        netblock_octets="192.168.240"

    - name: Check we can't talk to the other virtual network
      shell: |
        [ `/opt/telnet_client.py {{cirros_net_two_console_port}} ping {{cirros_ip}} | grep -c " 100% packet loss"` -eq 1 ]

    - name: Delete instance
      sf_instance:
        uuid: "{{cirros_net_two_uuid}}"
        state: absent

    - name: Delete network
      sf_network:
        uuid: "{{net_two_uuid}}"
        state: absent

#########################################
# Scenario: a network with an overlapping IP range should not be able to see the other virtual network
#########################################

- hosts: sf-1
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - include: tests/_util_network_create.yml
        netblock="192.168.242.0/24"
        name="net_three"

    - include: tests/_util_instance_start.yml
        name="cirros_net_three"
        distro=cirros
        network="{{net_three_uuid}}"
        sshkey=""
        userdata=""

    - include: tests/_util_network_cirros_validate.yml
        console_port="{{cirros_net_three_console_port}}"
        netblock_octets="192.168.242"

    - name: Check we can't talk to the other virtual network
      shell: |
        [ `/opt/telnet_client.py {{cirros_net_three_console_port}} ping {{cirros_ip}} | grep -c " 100% packet loss"` -eq 1 ]

    - name: Delete instance
      sf_instance:
        uuid: "{{cirros_net_three_uuid}}"
        state: absent

    - name: Delete network
      sf_network:
        uuid: "{{net_three_uuid}}"
        state: absent

#########################################
# Scenario: requesting a specific IP address should work
#########################################

- hosts: sf-1
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - include: tests/_util_network_create.yml
        netblock="192.168.242.0/24"
        name="net_four"

    - include: tests/_util_instance_start.yml
        name="cirros_net_four"
        distro=cirros
        network="{{net_four_uuid}}@192.168.242.42"
        sshkey=""
        userdata=""

    - name: Make sure we get the IP we requested
      fail:
        msg: "We did not get the IP we requested: {{cirros_net_four_ip}} != 192.168.242.42"
      when: cirros_net_four_ip != "192.168.242.42"

    - name: Delete instance
      sf_instance:
        uuid: "{{cirros_net_four_uuid}}"
        state: absent

#########################################
# Scenario: a floating IP on the non-network node should work
#########################################

- hosts: sf-2
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - include: tests/_util_instance_start.yml
        name="cirros_floating"
        distro=cirros
        network="{{hostvars['sf-1']['net_four_uuid']}}"
        sshkey=""
        userdata=""

    - name: Determine network interface uuid
      shell: sf-client --simple instance show {{cirros_floating_uuid}} | grep iface | grep -v "interface uuid" | cut -f 2 -d ","
      register: cirros_floating_interface_uuid_complex

    - name: Extract network interface uuid
      set_fact:
        cirros_floating_interface_uuid: "{{cirros_floating_interface_uuid_complex.stdout}}"

    - name: Assign a floating IP
      shell: |
        sf-client --simple interface float {{cirros_floating_interface_uuid}}

    - name: Determine floating IP
      shell: sf-client --simple instance show {{cirros_floating_uuid}} | grep iface | grep -v "interface uuid" | cut -f 7 -d ","
      register: cirros_floating_external_ip_complex

    - name: Extract the floating IP
      set_fact:
        cirros_floating_external_ip: "{{cirros_floating_external_ip_complex.stdout}}"

- hosts: sf-1
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Network node outer namespace can ping floating IP
      shell: |
        [ `ping -c 3 -w 4 {{hostvars['sf-2']['cirros_floating_external_ip']}} | grep -c " 0% packet loss"` -eq 1 ]

    - name: Delete instance
      sf_instance:
        uuid: "{{hostvars['sf-2']['cirros_floating_uuid']}}"
        state: absent

    - name: Delete network
      sf_network:
        uuid: "{{net_four_uuid}}"
        state: absent

#########################################
# Scenario: an empty cloud should be empty
#########################################

- hosts: sf-1
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Delete our last instance
      sf_instance:
        uuid: "{{cirros_uuid}}"
        state: absent

    - name: Delete our last network
      sf_network:
        uuid: "{{net_one_uuid}}"
        state: absent

    - name: Delete our last instance and validate
      copy:
        content: |
          #!/bin/bash -e

          [ `sf-client --simple instance list | grep sf-1 | wc -l` -eq 0 ]
          [ `virsh list | grep running | wc -l` -eq 0 ]
          [ `/bin/bash /opt/sfmysql "select * from instances" | wc -l` -eq 0 ]
          [ `/bin/bash /opt/sfmysql "select * from network_interfaces" | wc -l` -eq 0 ]
          [ `/bin/bash /opt/sfmysql "select * from networks \G" | grep -c uuid` -eq 1 ]
          [ `/bin/bash /opt/sfmysql "select * from snapshots" | wc -l` -eq 0 ]
        dest: /tmp/shell_script
        owner: root
        group: root
        mode: u=rx,g=rx,o=rx

    - name: Execute
      shell: /tmp/shell_script

#########################################
# Scenario: the final checkening
#########################################

- hosts: hypervisors
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: We should not have any VXLAN interfaces left
      shell: |
        [ `ifconfig | grep -c vxlan` -eq 0 ]
