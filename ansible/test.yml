- hosts: localhost
  gather_facts: yes
  connection: ssh
  vars_files:
    - vars

  tasks:
    - include: includes/terraform.yml

- hosts: hypervisors
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Create sfmysql helper wrapper
      copy:
        content: |
          #/bin/bash -e
          . /etc/sf/sfrc
          mysql -h $_DB_NODE_IP -u sf --password=$_DB_PASSWORD sf -e "$1"
        dest: /opt/sfmysql
        owner: root
        group: root
        mode: u=rx,g=rx,o=rx

    - name: Create telnet console helper
      copy:
        src: files/telnet_client.py
        dest: /opt/telnet_client.py
        owner: root
        group: root
        mode: u=rx,g=rx,o=rx

    - name: Clear out old instances and networks
      shell: |
        for inst in `sf-client --no-pretty instance list | grep -v uuid | cut -f 1 -d ","`
        do
          sf-client --no-pretty instance delete $inst
        done

        for net in `sf-client --no-pretty network list | grep -v uuid | cut -f 1 -d ","`
        do
          sf-client --no-pretty network delete $net
        done
      run_once: true

    - name: And then do a quick scrub as well
      shell: |
        /srv/shakenfist/src/cleanup.sh

    - name: We should have an empty list of networks
      shell: |
        [ `sf-client --no-pretty network list | wc -l` -eq 1 ]

    - name: We should have an empty list of instances
      shell: |
        [ `sf-client --no-pretty instance list | wc -l` -eq 1 ]

    - name: We shouldn't have any VMs running
      shell: |
        [ `virsh list | grep running | wc -l` -eq 0 ]

    - name: And there should be no containers
      shell: |
        [ `docker ps | wc -l` -eq 1 ]

    - name: And there should be no mesh networks
      shell: |
        [ `ifconfig | grep -c br-vxlan` -eq 0 ]

    # Needs to be wrapped in a helper...
    - name: Clear out the instances table
      shell: |
        /bin/bash /opt/sfmysql "delete from instances"

    - name: Clear out the network_interfaces table
      shell: |
        /bin/bash /opt/sfmysql "delete from network_interfaces"

    - name: Clear out the networks table
      shell: |
        /bin/bash /opt/sfmysql "delete from networks"

    - name: Clear out the snapshots table
      shell: |
        /bin/bash /opt/sfmysql "delete from snapshots"

    - name: Create a network
      shell: |
        sf-client --no-pretty network create 192.168.242.0/24
      run_once: true

    - name: Determine network uuid
      shell: |
        sf-client --no-pretty network list | grep 192.168.242.0/24 | cut -f 1 -d ","
      register: network_uuid_complex

    - name: Extract network uuid
      set_fact:
        network_uuid: "{{network_uuid_complex.stdout}}"

    - name: Log network uuid
      debug:
        msg: Network uuid is {{network_uuid}}.

- hosts: sf-1
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Start an instance on sf-1
      shell: |
        sf-client --no-pretty instance create inst-1 1 1 -d 8@cirros -n "{{network_uuid}}"

    - name: We should have one VM on sf-1
      shell: |
        [ `virsh list | grep running | wc -l` -eq 1 ]

- hosts: sf-2
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Start an instance on sf-2
      shell: |
        sf-client --no-pretty instance create inst-2 1 1 -d 8@cirros -n "{{network_uuid}}"

    - name: We should have one VM on sf-2
      shell: |
        [ `virsh list | grep running | wc -l` -eq 1 ]

- hosts: hypervisors
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: We should have two instances
      shell: |
        [ `sf-client --no-pretty instance list | wc -l` -eq 3 ]

    - name: With one recorded on sf-1
      shell: |
        [ `sf-client --no-pretty instance list | grep sf-1 | wc -l` -eq 1 ]

    - name: And one recorded on sf-2
      shell: |
        [ `sf-client --no-pretty instance list | grep sf-2 | wc -l` -eq 1 ]

    - name: Determine instance uuid
      shell: |
        sf-client --no-pretty instance list | grep {{inventory_hostname}} | cut -f 1 -d ","
      register: centos_instance_uuid_complex

    - name: Extract instance uuid
      set_fact:
        centos_instance_uuid: "{{centos_instance_uuid_complex.stdout}}"

    - name: Log instance uuid
      debug:
        msg: Instance uuid is {{centos_instance_uuid}}.

    - name: Determine instance console port
      shell: |
        sf-client --no-pretty instance show {{centos_instance_uuid}} | grep "console port" | cut -f 2 -d ":"
      register: centos_console_port_complex

    - name: Extract console port
      set_fact:
        centos_console_port: "{{centos_console_port_complex.stdout}}"

    - name: Log instance console port
      debug:
        msg: Instance console port is {{centos_console_port}}.

    - name: Determine instance IP
      shell: |
        sf-client --no-pretty instance show {{centos_instance_uuid}} | grep "ipv4" | cut -f 2 -d ":"
      register: centos_instance_ip_complex

    - name: Extract instance IP
      set_fact:
        centos_instance_ip: "{{centos_instance_ip_complex.stdout}}"

    - name: Log instance IP
      debug:
        msg: Instance IP is {{centos_instance_ip}}.

- hosts: sf-1
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Ensure that inst-1 appears in the dhcp config on the network node
      shell: |
        [ `grep -c "fixed-address {{hostvars['sf-1']['centos_instance_ip']}}" /srv/shakenfist/dhcp/{{network_uuid}}/dhcpd.conf` -eq 1 ]

    - name: Ensure that inst-2 appears in the dhcp config on the network node
      shell: |
        [ `grep -c "fixed-address {{hostvars['sf-2']['centos_instance_ip']}}" /srv/shakenfist/dhcp/{{network_uuid}}/dhcpd.conf` -eq 1 ]

- hosts: sf-2
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Ensure that dhcp is not configured on a non-network-node
      shell: |
        [ ! -e /srv/shakenfist/dhcp/{{network_uuid}}/dhcpd.conf ]

- hosts: hypervisors
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    # This needs to be so long because DHCP failures take a fair while to happen
    - name: Wait for instances to boot
      pause:
        minutes: 5

    - name: Wait for console port to answer
      wait_for:
        port: "{{centos_console_port}}"

    - name: udhcp should have started
      shell: |
        [ `grep -c "udhcpc: started" /srv/shakenfist/instances/{{centos_instance_uuid}}/console.log` -eq 1 ]

    - name: udhcp should have acquired a lease
      shell: |
        [ `grep -c "udhcpc: no lease, failing" /srv/shakenfist/instances/{{centos_instance_uuid}}/console.log` -eq 0 ]

    - name: Instance should have a configured eth0
      shell: |
        [ `/opt/telnet_client.py {{centos_console_port}} ifconfig eth0 | grep -c "192.168.242"` -eq 1 ]

    - name: Instance should have a configured DNS resolver
      shell: |
        [ `/opt/telnet_client.py {{centos_console_port}} cat /etc/resolv.conf | grep -c "8.8.8.8"` -eq 1 ]

    - name: Instance should have a configured default route
      shell: |
        [ `/opt/telnet_client.py {{centos_console_port}} netstat -rn | grep -c "192.168.242.1"` -eq 1 ]

    - name: Instances should be able to ping their gateway
      shell: |
        [ `/opt/telnet_client.py {{centos_console_port}} ping 192.168.242.1 | grep -c " 0% packet loss"` -eq 1 ]

    - name: Instances should be able to ping their DHCP server
      shell: |
        [ `/opt/telnet_client.py {{centos_console_port}} ping 192.168.242.2 | grep -c " 0% packet loss"` -eq 1 ]

    - name: Instances should be able to ping Google
      shell: |
        [ `/opt/telnet_client.py {{centos_console_port}} ping 8.8.8.8 | grep -c " 0% packet loss"` -eq 1 ]

- hosts: sf-1
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: The instance on sf-1 should be able to ping the instance on sf-2
      shell: |
        [ `/opt/telnet_client.py {{centos_console_port}} ping {{hostvars['sf-2']['centos_instance_ip']}} | grep -c " 0% packet loss"` -eq 1 ]

- hosts: sf-2
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: We should have one VM on sf-2
      shell: |
        [ `virsh list | grep running | wc -l` -eq 1 ]

    - name: Start an Ubuntu 18.04 instance on sf-2
      shell: |
        sf-client --no-pretty instance create ubuntu 1 1 -d 8@ubuntu:18.04 -n "{{network_uuid}}"

    - name: We should have two VMs on sf-2
      shell: |
        [ `virsh list | grep running | wc -l` -eq 2 ]

    - name: Determine instance uuid
      shell: |
        sf-client --no-pretty instance list | grep {{inventory_hostname}} | grep ubuntu | cut -f 1 -d ","
      register: ubuntu_instance_uuid_complex

    - name: Extract instance uuid
      set_fact:
        ubuntu_instance_uuid: "{{ubuntu_instance_uuid_complex.stdout}}"

    - name: Log instance uuid
      debug:
        msg: Instance uuid is {{ubuntu_instance_uuid}}.

    # This needs to be so long because DHCP failures take a fair while to happen
    - name: Wait for instance to boot
      pause:
        minutes: 5

    - name: Determine instance IP
      shell: |
        sf-client --no-pretty instance show {{ubuntu_instance_uuid}} | grep "ipv4" | cut -f 2 -d ":"
      register: ubuntu_instance_ip_complex

    - name: Extract instance IP
      set_fact:
        ubuntu_instance_ip: "{{ubuntu_instance_ip_complex.stdout}}"

    - name: Log instance IP
      debug:
        msg: Instance IP is {{ubuntu_instance_ip}}.

- hosts: sf-1
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    # NOTE(mikal): Ubuntu 18.04 has a bug where DHCP doesn't always work in the
    # cloud image. This is ok though, because we should be using the config drive
    # style interface information anyway.

    - name: Instance is pingable
      shell: |
        [ `ping -c 1 {{hostvars['sf-2']['ubuntu_instance_ip']}} | grep -c " 0% packet loss"` -eq 1 ]

- hosts: sf-2
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Delete the ubuntu instance
      shell: |
        sf-client instance delete {{ubuntu_instance_uuid}}

    - name: Post delete of an unrelated instance, an instance should still be able to ping Google
      shell: |
        [ `/opt/telnet_client.py {{centos_console_port}} ping 8.8.8.8 | grep -c " 0% packet loss"` -eq 1 ]

    - name: We should have one VM on sf-2
      shell: |
        [ `virsh list | grep running | wc -l` -eq 1 ]

- hosts: hypervisors
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Record the state of the mesh before reboot
      shell: |
        bridge fdb show brport vxlan-1
      register: mesh_state

    - name: Log the mesh before
      debug:
        msg: "Mesh state: {{mesh_state}}"

- hosts: sf-2
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Rebooting a node should retain its instances
      reboot:
        reboot_timeout: 300

    - name: Give the node a minute to settle
      pause:
        minutes: 1

    - name: We should have one VM on sf-2
      shell: |
        [ `virsh list | grep running | wc -l` -eq 1 ]

- hosts: hypervisors
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Record the state of the mesh after reboot
      shell: |
        bridge fdb show brport vxlan-1
      register: mesh_state

    - name: Log the mesh after
      debug:
        msg: "Mesh state: {{mesh_state}}"

- hosts: sf-2
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Post reboot an instance should still be able to ping Google
      shell: |
        [ `/opt/telnet_client.py {{centos_console_port}} ping 8.8.8.8 | grep -c " 0% packet loss"` -eq 1 ]

- hosts: sf-1
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Deleting an instance hosted remotely should work
      shell: |
        sf-client instance delete {{hostvars['sf-2']['centos_instance_uuid']}}

    - name: Test database records the delete
      shell: |
        [ `sf-client --no-pretty instance list | grep sf-2 | wc -l` -eq 0 ]

- hosts: sf-2
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: We shouldn't have any VMs running on sf-2
      shell: |
        [ `virsh list | grep running | wc -l` -eq 0 ]

    - name: And we shouldn't have any mesh network on sf-2 any more
      shell: |
        [ `ifconfig | grep -c vxlan` -eq 0 ]

- hosts: sf-1
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Delete our last instance
      shell: |
        sf-client instance delete `sf-client --no-pretty instance list | grep sf-1 | cut -f 1 -d ","`

    - name: Test database records the delete
      shell: |
        [ `sf-client --no-pretty instance list | grep sf-1 | wc -l` -eq 0 ]

    - name: We shouldn't have any VMs running on sf-1
      shell: |
        [ `virsh list | grep running | wc -l` -eq 0 ]

    - name: The instances table should be empty
      shell: |
        [ `/bin/bash /opt/sfmysql "select * from instances" | wc -l` -eq 0 ]

    - name: The network_interfaces table should be empty
      shell: |
        [ `/bin/bash /opt/sfmysql "select * from network_interfaces" | wc -l` -eq 0 ]

    - name: The networks table should still have an entry
      shell: |
        [ `/bin/bash /opt/sfmysql "select * from networks \G" | grep -c uuid` -eq 1 ]

    - name: The snapshots table should be empty
      shell: |
        [ `/bin/bash /opt/sfmysql "select * from snapshots" | wc -l` -eq 0 ]
