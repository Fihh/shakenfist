#########################################
# Import inventory from terraform
#########################################

- hosts: localhost
  gather_facts: yes
  connection: ssh
  vars_files:
    - vars

  tasks:
    - include: includes/terraform.yml

#########################################
# Scenario: we can start cirros VMs
#########################################

- hosts: hypervisors
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - include: tests/_setup.yml
    - include: tests/_util_instance_start.yml
        name="cirros"
        distro=cirros
        network="{{net_one_uuid}}"
        extra=""

    - name: Validate
      copy:
        content: |
          #!/bin/bash -e

          [ `sf-client --no-pretty instance list | wc -l` -eq 3 ]
          [ `sf-client --no-pretty instance list | grep sf-1 | wc -l` -eq 1 ]
          [ `sf-client --no-pretty instance list | grep sf-2 | wc -l` -eq 1 ]
        dest: /tmp/shell_script
        owner: root
        group: root
        mode: u=rx,g=rx,o=rx

    - name: Execute
      shell: /tmp/shell_script

#########################################
# Scenario: the network node DHCP is correct
#########################################

- hosts: sf-1
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Ensure that the instances appear in the dhcp config on the network node
      copy:
        content: |
          #!/bin/bash -e

          [ `grep -c "{{hostvars['sf-1']['cirros_ip']}}" /srv/shakenfist/dhcp/{{net_one_uuid}}/hosts` -eq 1 ]
          [ `grep -c "{{hostvars['sf-2']['cirros_ip']}}" /srv/shakenfist/dhcp/{{net_one_uuid}}/hosts` -eq 1 ]
        dest: /tmp/shell_script
        owner: root
        group: root
        mode: u=rx,g=rx,o=rx

    - name: Execute
      shell: /tmp/shell_script

- hosts: sf-2
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Ensure that dhcp is not configured on a non-network-node
      copy:
        content: |
          #!/bin/bash -e

          [ ! -e /srv/shakenfist/dhcp/{{net_one_uuid}}/config ]
          [ `ifconfig | grep -c 192.168.242.1` -eq 0 ]
        dest: /tmp/shell_script
        owner: root
        group: root
        mode: u=rx,g=rx,o=rx

    - name: Execute
      shell: /tmp/shell_script

#########################################
# Scenario: verify networking on our cirros instances
#########################################

- hosts: hypervisors
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - include: tests/_util_network_cirros_validate.yml
        console_port="{{cirros_console_port}}"
        netblock_octets="192.168.242"

- hosts: sf-1
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: The instance on sf-1 should be able to ping the instance on sf-2
      shell: |
        [ `/opt/telnet_client.py {{cirros_console_port}} ping {{hostvars['sf-2']['cirros_ip']}} | grep -c " 0% packet loss"` -eq 1 ]

#########################################
# Scenario: we can start an Ubuntu instance too
#########################################

- hosts: sf-2
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - include: tests/_util_instance_start.yml
        name="ubuntu"
        distro=ubuntu:18.04
        network="{{net_one_uuid}}"
        extra=""

- hosts: sf-1
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    # NOTE(mikal): Ubuntu 18.04 has a bug where DHCP doesn't always work in the
    # cloud image. This is ok though, because we should be using the config drive
    # style interface information anyway.

    - name: Instance is pingable from inside the network namespace
      shell: |
        [ `ip netns exec {{net_one_uuid}} ping -c 1 {{hostvars['sf-2']['ubuntu_ip']}} | grep -c " 0% packet loss"` -eq 1 ]

#########################################
# Scenario: deleting instances works
#########################################

- hosts: sf-2
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Deleting an instance hosted locally should work
      shell: |
        sf-client instance delete {{ubuntu_uuid}}

    - include: tests/_util_network_cirros_validate.yml
        console_port="{{cirros_console_port}}"
        netblock_octets="192.168.242"

    - name: We should have one VM on sf-2
      shell: |
        [ `virsh list | grep running | wc -l` -eq 1 ]

#########################################
# Scenario: reboots, pauses, and power offs
#########################################

- hosts: sf-2
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - include: tests/_util_instance_reboot.yml
        uuid={{cirros_uuid}}
        type=soft

    - include: tests/_util_network_cirros_validate.yml
        console_port="{{cirros_console_port}}"
        netblock_octets="192.168.242"

    - include: tests/_util_instance_reboot.yml
        uuid={{cirros_uuid}}
        type=hard

    - include: tests/_util_network_cirros_validate.yml
        console_port="{{cirros_console_port}}"
        netblock_octets="192.168.242"

    - include: tests/_util_instance_halt.yml
        uuid={{cirros_uuid}}
        action_one=poweroff
        action_two=poweron

    - include: tests/_util_network_cirros_validate.yml
        console_port="{{cirros_console_port}}"
        netblock_octets="192.168.242"

    - include: tests/_util_instance_halt.yml
        uuid={{cirros_uuid}}
        ip={{cirros_uuid}}
        action_one=pause
        action_two=unpause

    - include: tests/_util_network_cirros_validate.yml
        console_port="{{cirros_console_port}}"
        netblock_octets="192.168.242"

#########################################
# Scenario: delete a remote instance
#########################################

- hosts: sf-1
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Deleting an instance hosted remotely should work
      copy:
        content: |
          #!/bin/bash -e

          sf-client instance delete {{hostvars['sf-2']['cirros_uuid']}}
          [ `sf-client --no-pretty instance list | grep sf-2 | wc -l` -eq 0 ]
        dest: /tmp/shell_script
        owner: root
        group: root
        mode: u=rx,g=rx,o=rx

    - name: Execute
      shell: /tmp/shell_script

- hosts: sf-2
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: We shouldn't have any VMs or mesh networks running on sf-2
      copy:
        content: |
          #!/bin/bash -e

          [ `virsh list | grep running | wc -l` -eq 0 ]
          [ `ifconfig | grep -c vxlan` -eq 0 ]
        dest: /tmp/shell_script
        owner: root
        group: root
        mode: u=rx,g=rx,o=rx

    - name: Execute
      shell: /tmp/shell_script

#########################################
# Scenario: user data and ssh keys
#########################################

- hosts: sf-2
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - include: tests/_util_instance_start.yml
        name="cirros_with_extras"
        distro=cirros
        network="{{net_one_uuid}}"
        extra="-i /opt/id_rsa.pub -u /opt/userdata"

    # The test value is two here because we also get a copy of the shell script that the
    # helper runs
    - name: Ensure user data ran and ssh keys were setup, then cleanup
      copy:
        content: |
          #!/bin/bash -e

          [ `/opt/telnet_client.py {{cirros_with_extras_console_port}} exists /home/cirros/output.txt | grep -c "File exists"` -eq 2 ]
          [ `/opt/telnet_client.py {{cirros_with_extras_console_port}} exists /home/cirros/.ssh/authorized_keys | grep -c "File exists"` -eq 2 ]
          sf-client instance delete {{cirros_with_extras_uuid}}
        dest: /tmp/shell_script
        owner: root
        group: root
        mode: u=rx,g=rx,o=rx

    - name: Execute
      shell: /tmp/shell_script

#########################################
# Scenario: a second network shouldn't be able to see the first network
#########################################

- hosts: sf-1
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - include: tests/_util_network_create.yml
        netblock="192.168.240.0/24"
        name="net_two"

    - include: tests/_util_instance_start.yml
        name="cirros_net_two"
        distro=cirros
        network="{{net_two_uuid}}"
        extra=""

    - include: tests/_util_network_cirros_validate.yml
        console_port="{{cirros_net_two_console_port}}"
        netblock_octets="192.168.240"

    - name: Check we can't talk to the other virtual network
      shell: |
        [ `/opt/telnet_client.py {{cirros_net_two_console_port}} ping {{cirros_ip}} | grep -c " 100% packet loss"` -eq 1 ]

    - name: Delete our instance and network
      copy:
        content: |
          #!/bin/bash -e

          sf-client instance delete {{cirros_net_two_uuid}}
          sf-client network delete {{net_two_uuid}}
        dest: /tmp/shell_script
        owner: root
        group: root
        mode: u=rx,g=rx,o=rx

    - name: Execute
      shell: /tmp/shell_script

#########################################
# Scenario: a network with an overlapping IP range should not be able to see the other virtual network
#########################################

- hosts: sf-1
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - include: tests/_util_network_create.yml
        netblock="192.168.242.0/24"
        name="net_three"

    - include: tests/_util_instance_start.yml
        name="cirros_net_three"
        distro=cirros
        network="{{net_three_uuid}}"
        extra=""

    - include: tests/_util_network_cirros_validate.yml
        console_port="{{cirros_net_three_console_port}}"
        netblock_octets="192.168.242"

    - name: Check we can't talk to the other virtual network
      shell: |
        [ `/opt/telnet_client.py {{cirros_net_three_console_port}} ping {{cirros_ip}} | grep -c " 100% packet loss"` -eq 1 ]

    - name: Delete our instance and network
      copy:
        content: |
          #!/bin/bash -e

          sf-client instance delete {{cirros_net_three_uuid}}
          sf-client network delete {{net_three_uuid}}
        dest: /tmp/shell_script
        owner: root
        group: root
        mode: u=rx,g=rx,o=rx

    - name: Execute
      shell: /tmp/shell_script

#########################################
# Scenario: an empty cloud should be empty
#########################################

- hosts: sf-1
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: Delete our last instance and validate
      copy:
        content: |
          #!/bin/bash -e

          sf-client instance delete {{cirros_uuid}}
          sf-client network delete {{net_one_uuid}}
          [ `sf-client --no-pretty instance list | grep sf-1 | wc -l` -eq 0 ]
          [ `virsh list | grep running | wc -l` -eq 0 ]
          [ `/bin/bash /opt/sfmysql "select * from instances" | wc -l` -eq 0 ]
          [ `/bin/bash /opt/sfmysql "select * from network_interfaces" | wc -l` -eq 0 ]
          [ `/bin/bash /opt/sfmysql "select * from networks \G" | grep -c uuid` -eq 1 ]
          [ `/bin/bash /opt/sfmysql "select * from snapshots" | wc -l` -eq 0 ]
        dest: /tmp/shell_script
        owner: root
        group: root
        mode: u=rx,g=rx,o=rx

    - name: Execute
      shell: /tmp/shell_script

- hosts: hypervisors
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars_files:
    - vars

  tasks:
    - name: We should not have any VXLAN interfaces left
      shell: |
        [ `ifconfig | grep -c vxlan` -eq 0 ]
